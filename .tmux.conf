# remap predix to C-a
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# split with | -> h ;; - -> v
bind | split-window -h
bind - split-window -v
unbind '"'
unbind %

# reload with prefix-r
bind r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# prev and next session with prefix g, prefix h
#bind-key -r ( switch-client -p
#bind-key -r ) switch-client -n
bind-key -r g switch-client -p
bind-key -r h switch-client -n

# resize panes with CR-HJKL
unbind C-J #resize-pane -D 15 \; display-message "resizing D"
unbind C-K #resize-pane -U 15 \; display-message "resizing U"
unbind C-H #resize-pane -L 15 \; display-message "resizing L"
unbind C-L #resize-pane -R 15 \; display-message "resizing R"

# navigate panes with Ctrl-hjkl
# bind -n C-\ select-pane -L
# bind -n C-= select-pane -R
# bind -n C-k select-pane -U
# bind -n C-j select-pane -D

# navigate with Navigator.nvim
version_pat='s/^tmux[^0-9]*([.0-9]+).*/\1/p'

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
tmux_version="$(tmux -V | sed -En "$version_pat")"
setenv -g tmux_version "$tmux_version"

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\\ select-pane -l
# end of Navigator.nvim
 
# Pers prefix C-W to log work to excel
bind C-W display-message "Log work" \; display-popup 'invoke_work_report.sh' \; 
#bind C-L command-prompt -I 'display-popup "/home/hrutvik_/pers/go-repos/go-cli/go-cli list"'
bind C-L display-popup "go-cli list"
# bind C-A display-popup "go-cli " \; command-prompt -I "display-popup 'go-cli add '"

bind C-O display-popup "tsa.sh"
bind-key -r f run-shell "tmux neww ~/hbin/ts.sh"
# bind ts display-popup "tsa"
#######################################################
# Settings
# mouse mode on
set -g mouse on
# repeat binding w/o prefix timeout
set -g repeat-time 2000

# true colors for font
set -g default-terminal 'tmux-256color'
# stop auto window rename
# set-option -g allow-rename off

set-option -sa terminal-features ',xterm-256color:RGB'

# scrollback history limit set to 5000 lines
set-option -g history-limit 50000

# use the copy mode - vi table keybindings
set -g mode-keys vi
set -g status-keys vi

# resurrect neovim sessions
set -g @resurrect-strategy-nvim 'session'

# Status line
# Increase the length of the left status section
set -g status-left-length 50

# Increase the length of the right status section
set -g status-right-length 100

# Set the separator between window numbers/names
set -g window-status-separator " #[fg=red] "
# Set the style for the active window
set -g window-status-current-style fg=black,bg=green

set -g status-style bg=black
set -g status-left "#[bg=black]#[fg=magenta][\"#S\"] #[fg=cyan]#(ip a | grep 'global' | awk '{print $2}' | cut -d/ -f1) | #[fg=red] #(pgrep -u hrutvik_ nvim | wc -l) #[fg=red]#[bg=black]| #[fg=#cccccc] #[underscore,bold,fg=#cccccc]#(timew | awk '/Total/{print $2}')#[default] | "
#set -g status-left "#[bg=blue]#[fg=magenta][\"#S\"] #[fg=yellow]#h  #[fg=cyan]#(ip a | grep 'global' | awk '{print $2}' | cut -d/ -f1) #[fg=blue]#[bg=black] "
#set -g status-left "#[bg=blue]#[fg=white][\"#S\"]:#I:#P | #[fg=yellow]#h | #[fg=cyan]#(hostname -i) #[fg=blue]#[bg=black] "
#set -g status-right "#[fg=red]#(pgrep -u hrutvik_ nvim | wc -l) |#[fg=white] #(while true; do pgrep -u hrutvik_ nvim | xargs -I{} ps -p {} -o rss= | xargs -I{} echo {} kb | xargs echo ; sleep 3; done) | #[fg=green] WIP :: #(jq -r '.active_todos[].project' $HOME/todos.segregated.json -c) |#[fg=yellow]#(uptime|cut -d ':' -f 5) | #[fg=blue]%H:%M %d-%b-%y"
set -g status-right "#[fg=magenta] #[fg=grey]#[bold]#(task _projects | head -n 4 > /tmp/pjects.txt && task _projects | head -n 4 | xargs -I{} task project:{} count rc.context: > /tmp/pcounts.txt; paste -d':' /tmp/pjects.txt /tmp/pcounts.txt | tr '\n' ' ' | awk '{print $1,$2,$3,$4}') #[default,fg=green] #[italics]WIP :: #(while true; do task _get rc.context; sleep 2; done) |#[default,fg=yellow]#(uptime|cut -d ':' -f 5) | #[italics,underscore,fg=blue]%H:%M %d-%b-%y"
#|#[fg=white] #(while true; do pgrep -u hrutvik_ nvim | xargs -I{} ps -p {} -o rss= | xargs -I{} echo {} kb | xargs echo ; sleep 3; done) |
#set -g status-right "#[fg=green]#(whoami)@#H |#[fg=yellow]#(uptime|cut -d ':' -f 5) | #[fg=blue]%H:%M:%S %d-%b-%y"




set -g status-justify
set -g status-interval 1

# Settings
#######################################################

#######################################################
# Hooks
# Define a hook for the client-attached event
#set-hook -g client-attached 'display-message "hellO on attach"'
set-hook -g client-session-changed 'display-message "switched session"'
#set-hook -g client-session-changed[1] 'display-popup -x170 -y170 -w20% "cat ~/hbin/instructions_tmux_go_cli.txt"'

#######################################################

#######################################
# Always keep at bottom of .tmux.conf #
######################################
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

#set -g @plugin 'erikw/tmux-powerline'
set -g @plugin 'tmux-plugins/tmux-resurrect'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
